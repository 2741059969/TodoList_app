// ToDoList 应用是一款简单的任务清单应用，用于帮助用户管理自己的任务。以下是 ToDoList 应用的详细要求：

// 一个任务是一个组件
// 任务包含以下信息：
// 标题
// 描述
// 优先级（高、中、低）
// 截止日期
// 是否完成（初始状态为未完成）
// 删除按钮和编辑按钮

// 可以添加任务：
// 提供五个输入控件，且有添加按钮

// 用户可以查看任务列表，任务按照以下方式进行排序：
// v-for列表渲染
// 数组排序，不希望修改原数组数据，希望返回新的排序好的数组，利用计算属性
// 排序算法做的事：
// 优先级从高到低排序
// 未完成的任务排在已完成的任务前面
// 同一优先级的任务按照截止日期从早到晚排序

//
// 用户可以修改任务的标题、描述、优先级、截止日期和完成状态。
// 点击编辑时触发一个函数发送事件传入id，在负组件中监听到后调用函数（拿着id赋值给editid：要传入表单内部的），弹出一个div框，里面有多个输入项，输入完成点击确认，触发函数后发送自定义事件，并传入输入好的信息对象（含id）,在负组件中监听触发函数，拿着id查找这条要更改的数据在数组中的位置，找到后响应式赋值更改触发试图更新
// 打算新增：在点击编辑时希望弹出的表单能有初始值，初始值即为原来的数据的各个项的值

// 用户可以删除任务：
// 思路是点击一条任务时会获取它的id，然后去数组数据中查找这条数据而后把它删除

// 用户可以标记任务为已完成或未完成。
// 暂时把它结合在编辑功能中

// 用户可以对任务进行搜索和筛选。用户可以通过关键字搜索任务的标题和描述，也可以通过优先级、截止日期和完成状态筛选任务。

// 在任务列表上方放置一个输入框和搜索按钮，根据输入框内容过滤数组根据结果数组v-for渲染

// 用户可以保存任务列表，下次打开应用时可以恢复之前的任务列表。
// 思路是把任务列表的数组数据保存到本地localstorage

// 以上是 ToDoList 应用的基本要求，开发者可以根据实际情况进行扩展。

// 以下是一个可能的 ToDoList 应用的详细要求：

// 可以添加新的任务。
// 可以标记任务为已完成或未完成状态。
// 可以编辑任务的标题和内容。
// 可以删除任务。
// 可以按照不同的方式排序任务列表（例如按照创建时间、完成状态、标题等排序）。
// 可以筛选任务列表，显示所有任务、未完成的任务或已完成的任务。
// 可以根据关键字搜索任务。
// 可以添加任务的截止日期和提醒时间，并且在截止日期或提醒时间到达时进行提醒。
// 可以保存任务列表，使得用户可以在关闭浏览器或刷新页面后重新访问任务列表。
// 可以实现任务列表数据的持久化，例如通过浏览器的本地存储或者与后端服务器交互等方式。
// 以下是ToDoList应用的更详细要求：

// 应用主要分为两个页面：任务列表和添加任务。

// 任务列表页面应该包括以下功能：

// 展示当前所有的任务（包括已完成和未完成）。
// 可以勾选已完成任务，并在界面上区分已完成和未完成任务。
// 可以对任务进行编辑和删除。
// 添加任务页面应该包括以下功能：
// 可以输入任务的名称和详细描述。
// 可以选择任务的截止日期。
// 点击添加按钮后，将任务添加到任务列表页面中，并返回任务列表页面。
// 应用应该有一个顶部导航栏，包括两个链接：任务列表和添加任务。

// 应用中应该有一个数据存储库，用于存储和检索任务数据。

// 应用应该有适当的错误处理和用户反馈机制，例如在添加任务时输入无效数据时，应该显示错误提示消息。

// 应用的样式应该简洁明了，易于使用，适应不同的屏幕尺寸和设备。

// 任务数据可以进行持久化存储，例如使用浏览器本地存储（LocalStorage）。

// 这些要求可以作为参考，你可以根据自己的需求和能力对其进行调整和扩展。
